SELECT *
FROM DBO.NashvilleHousing


-- Standardizing the Date Format
SELECT SaleDateConverted, CONVERT(Date,SaleDate)
FROM DBO.NashvilleHousing

UPDATE NashvilleHousing
SET SaleDate = CONVERT(Date,SaleDate)

ALTER TABLE NashvilleHousing
Add SaleDateConverted Date;

UPDATE NashvilleHousing
SET SaleDateConverted = CONVERT(Date,SaleDate)


-- Populating Property Address Data
SELECT *
FROM DBO.NashvilleHousing
ORDER BY ParcelID

SELECT a.ParcelID, a.PropertyAddress, b.ParcelID, b.PropertyAddress, ISNULL(a.PropertyAddress,b.PropertyAddress)
FROM DBO.NashvilleHousing a
JOIN DBO.NashvilleHousing b
ON a.ParcelId = b.ParcelID
AND a.[UniqueID ] <> b.[UniqueID ]
WHERE a.PropertyAddress is Null

UPDATE a
SET PropertyAddress = ISNULL(a.PropertyAddress,b.PropertyAddress)
FROM DBO.NashvilleHousing a
JOIN DBO.NashvilleHousing b
ON a.ParcelId = b.ParcelID
AND a.[UniqueID ] <> b.[UniqueID ]
WHERE a.PropertyAddress is Null

SELECT a.ParcelID, a.PropertyAddress, b.ParcelID, b.PropertyAddress, ISNULL(a.PropertyAddress,b.PropertyAddress)
FROM DBO.NashvilleHousing a
JOIN DBO.NashvilleHousing b
ON a.ParcelId = b.ParcelID
AND a.[UniqueID ] <> b.[UniqueID ]
WHERE a.PropertyAddress is Null


-- Breaking Address Information into Individual Columns (Address, City, State)
SELECT PropertyAddress
FROM DBO.NashvilleHousing

SELECT 
SUBSTRING(PropertyAddress, 1, CHARINDEX(',',PropertyAddress)-1 ) as Address
, SUBSTRING(PropertyAddress, CHARINDEX(',',PropertyAddress) + 1 , Len(PropertyAddress)) as Address

FROM DBO.NashvilleHousing

-- Creating Two Additional Columns for Address Information  
ALTER TABLE NashvilleHousing
Add PropertySplitAddress NVARCHAR(255);

UPDATE NashvilleHousing
SET PropertySplitAddress = SUBSTRING(PropertyAddress, 1, CHARINDEX(',',PropertyAddress)-1 )

ALTER TABLE NashvilleHousing
Add PropertySplitCity NVARCHAR(255);

UPDATE NashvilleHousing
SET PropertySplitCity = SUBSTRING(PropertyAddress, CHARINDEX(',',PropertyAddress) + 1 , Len(PropertyAddress))

SELECT * 
FROM DBO.NashvilleHousing


SELECT OwnerAddress
FROM DBO.NashvilleHousing

SELECT 
PARSENAME(REPLACE(OwnerAddress, ',', '.'),3)
,PARSENAME(REPLACE(OwnerAddress, ',', '.'),2)
,PARSENAME(REPLACE(OwnerAddress, ',', '.'),1)
FROM DBO.NashvilleHousing


ALTER TABLE NashvilleHousing
Add OwnerSplitAddress NVARCHAR(255);

UPDATE NashvilleHousing
SET OwnerSplitAddress = PARSENAME(REPLACE(OwnerAddress, ',', '.'),3)

ALTER TABLE NashvilleHousing
Add OwnerSplitCity NVARCHAR(255);

UPDATE NashvilleHousing
SET OwnerSplitCity = PARSENAME(REPLACE(OwnerAddress, ',', '.'),2)

ALTER TABLE NashvilleHousing
Add OwnerSplitState NVARCHAR(255);

UPDATE NashvilleHousing
SET OwnerSplitState = PARSENAME(REPLACE(OwnerAddress, ',', '.'),1)

SELECT * 
FROM DBO.NashvilleHousing


-- Change Y and N to Yes and No in "Sold as Vacant" field
SELECT Distinct(SoldASVacant), COUNT(SoldAsVacant)
FROM DBO.NashvilleHousing
Group by SoldAsVacant
ORDER BY 2

SELECT SoldAsVacant
, CASE WHEN SoldAsVacant  ='Y' THEN 'Yes'
WHEN SoldAsVacant = 'N' THEN 'No'
ELSE SoldAsVacant
END
FROM DBO.NashvilleHousing

UPDATE NashvilleHousing
SET SoldAsVacant = CASE WHEN SoldAsVacant  ='Y' THEN 'Yes'
WHEN SoldAsVacant = 'N' THEN 'No'
ELSE SoldAsVacant
END
FROM DBO.NashvilleHousing

SELECT Distinct(SoldASVacant), COUNT(SoldAsVacant)
FROM DBO.NashvilleHousing
Group by SoldAsVacant
ORDER BY 2


-- Remove Duplicate Information
WITH RowNumCTE AS( 
SELECT *, 
ROW_NUMBER() OVER (
PARTITION BY ParcelID, 
PropertyAddress,
SalePrice,
SaleDate,
LegalReference
ORDER BY UniqueID
) AS row_num
FROM DBO.NashvilleHousing
)
DELETE 
FROM RowNumCTE
WHERE row_num >1

SELECT *
FROM DBO.NashvilleHousing


-- Removing Unused Columns
SELECT *
FROM DBO.NashvilleHousing

ALTER TABLE DBO.NashvilleHousing
DROP COLUMN OwnerAddress, TaxDistrict, PropertyAddress, SaleDate

ALTER TABLE DBO.NashvilleHousing
DROP COLUMN SaleDate

SELECT *
FROM DBO.NashvilleHousing


